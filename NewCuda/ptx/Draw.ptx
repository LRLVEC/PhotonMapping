//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-27506705
// Cuda compilation tools, release 10.2, V10.2.89
// Based on LLVM 3.4svn
//

.version 6.5
.target sm_61
.address_size 64

	// .globl	__raygen__RayAllocator
.const .align 8 .b8 paras[32];
.const .align 4 .b8 __cudart_i2opi_f[24] = {65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};

.visible .entry __raygen__RayAllocator(

)
{
	.local .align 4 .b8 	__local_depot0[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<12>;
	.reg .f32 	%f<117>;
	.reg .b32 	%r<89>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<27>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd8, %SP, 28;
	add.u64 	%rd1, %SPL, 28;
	// inline asm
	call (%r31), _optix_get_launch_index_x, ();
	// inline asm
	// inline asm
	call (%r32), _optix_get_launch_index_y, ();
	// inline asm
	mov.u64 	%rd9, 0;
	st.local.u32 	[%rd1+4], %rd9;
	st.local.u32 	[%rd1], %rd9;
	mov.u32 	%r34, 0;
	st.local.u32 	[%rd1+8], %r34;
	ld.const.v2.u32 	{%r35, %r36}, [paras+24];
	cvt.rn.f32.u32	%f1, %r31;
	cvt.rn.f32.u32	%f2, %r32;
	cvt.rn.f32.u32	%f17, %r35;
	cvt.rn.f32.u32	%f18, %r36;
	div.rn.f32 	%f19, %f1, %f17;
	div.rn.f32 	%f20, %f2, %f18;
	add.f32 	%f21, %f19, 0f00000000;
	mul.f32 	%f22, %f20, 0f429C774C;
	fma.rn.f32 	%f3, %f21, 0f414FD639, %f22;
	add.u64 	%rd2, %SPL, 0;
	mul.f32 	%f23, %f3, 0f3F22F983;
	cvt.rni.s32.f32	%r88, %f23;
	cvt.rn.f32.s32	%f24, %r88;
	mov.f32 	%f25, 0fBFC90FDA;
	fma.rn.f32 	%f26, %f24, %f25, %f3;
	mov.f32 	%f27, 0fB3A22168;
	fma.rn.f32 	%f28, %f24, %f27, %f26;
	mov.f32 	%f29, 0fA7C234C5;
	fma.rn.f32 	%f114, %f24, %f29, %f28;
	abs.f32 	%f5, %f3;
	setp.leu.f32	%p1, %f5, 0f47CE4780;
	@%p1 bra 	BB0_11;

	setp.eq.f32	%p2, %f5, 0f7F800000;
	@%p2 bra 	BB0_10;
	bra.uni 	BB0_2;

BB0_10:
	mov.f32 	%f32, 0f00000000;
	mul.rn.f32 	%f114, %f3, %f32;
	bra.uni 	BB0_11;

BB0_2:
	mov.b32 	 %r4, %f3;
	shr.u32 	%r5, %r4, 23;
	shl.b32 	%r41, %r4, 8;
	or.b32  	%r6, %r41, -2147483648;
	mov.u64 	%rd25, __cudart_i2opi_f;
	mov.u32 	%r81, -6;
	mov.u64 	%rd26, %rd2;
	mov.u32 	%r82, %r34;

BB0_3:
	.pragma "nounroll";
	ld.const.u32 	%r44, [%rd25];
	// inline asm
	{
	mad.lo.cc.u32   %r42, %r44, %r6, %r82;
	madc.hi.u32     %r82, %r44, %r6,  0;
	}
	// inline asm
	st.local.u32 	[%rd26], %r42;
	add.s64 	%rd26, %rd26, 4;
	add.s64 	%rd25, %rd25, 4;
	add.s32 	%r81, %r81, 1;
	setp.ne.s32	%p3, %r81, 0;
	@%p3 bra 	BB0_3;

	and.b32  	%r47, %r5, 255;
	add.s32 	%r48, %r47, -128;
	shr.u32 	%r49, %r48, 5;
	and.b32  	%r11, %r4, -2147483648;
	st.local.u32 	[%rd2+24], %r82;
	mov.u32 	%r50, 6;
	sub.s32 	%r51, %r50, %r49;
	mul.wide.s32 	%rd12, %r51, 4;
	add.s64 	%rd7, %rd2, %rd12;
	ld.local.u32 	%r84, [%rd7];
	ld.local.u32 	%r83, [%rd7+-4];
	and.b32  	%r14, %r5, 31;
	setp.eq.s32	%p4, %r14, 0;
	@%p4 bra 	BB0_6;

	mov.u32 	%r52, 32;
	sub.s32 	%r53, %r52, %r14;
	shr.u32 	%r54, %r83, %r53;
	shl.b32 	%r55, %r84, %r14;
	add.s32 	%r84, %r54, %r55;
	ld.local.u32 	%r56, [%rd7+-8];
	shr.u32 	%r57, %r56, %r53;
	shl.b32 	%r58, %r83, %r14;
	add.s32 	%r83, %r57, %r58;

BB0_6:
	shr.u32 	%r59, %r83, 30;
	shl.b32 	%r60, %r84, 2;
	add.s32 	%r86, %r60, %r59;
	shl.b32 	%r20, %r83, 2;
	shr.u32 	%r61, %r86, 31;
	shr.u32 	%r62, %r84, 30;
	add.s32 	%r21, %r61, %r62;
	setp.eq.s32	%p5, %r61, 0;
	@%p5 bra 	BB0_7;

	not.b32 	%r63, %r86;
	neg.s32 	%r85, %r20;
	setp.eq.s32	%p6, %r20, 0;
	selp.u32	%r64, 1, 0, %p6;
	add.s32 	%r86, %r64, %r63;
	xor.b32  	%r87, %r11, -2147483648;
	bra.uni 	BB0_9;

BB0_7:
	mov.u32 	%r85, %r20;
	mov.u32 	%r87, %r11;

BB0_9:
	cvt.u64.u32	%rd13, %r86;
	cvt.u64.u32	%rd14, %r85;
	bfi.b64 	%rd15, %rd13, %rd14, 32, 32;
	cvt.rn.f64.s64	%fd1, %rd15;
	mul.f64 	%fd2, %fd1, 0d3BF921FB54442D19;
	cvt.rn.f32.f64	%f30, %fd2;
	neg.f32 	%f31, %f30;
	setp.eq.s32	%p7, %r87, 0;
	selp.f32	%f114, %f30, %f31, %p7;
	setp.eq.s32	%p8, %r11, 0;
	neg.s32 	%r65, %r21;
	selp.b32	%r88, %r21, %r65, %p8;

BB0_11:
	and.b32  	%r30, %r88, 1;
	setp.eq.s32	%p9, %r30, 0;
	selp.f32	%f9, %f114, 0f3F800000, %p9;
	mul.rn.f32 	%f10, %f114, %f114;
	mov.f32 	%f34, 0f00000000;
	fma.rn.f32 	%f11, %f10, %f9, %f34;
	mov.f32 	%f115, 0fB94D4153;
	@%p9 bra 	BB0_13;

	mov.f32 	%f35, 0fBAB607ED;
	mov.f32 	%f36, 0f37CBAC00;
	fma.rn.f32 	%f115, %f36, %f10, %f35;

BB0_13:
	selp.f32	%f37, 0f3C0885E4, 0f3D2AAABB, %p9;
	fma.rn.f32 	%f38, %f115, %f10, %f37;
	selp.f32	%f39, 0fBE2AAAA8, 0fBEFFFFFF, %p9;
	fma.rn.f32 	%f40, %f38, %f10, %f39;
	fma.rn.f32 	%f116, %f40, %f11, %f9;
	and.b32  	%r66, %r88, 2;
	setp.eq.s32	%p11, %r66, 0;
	@%p11 bra 	BB0_15;

	mov.f32 	%f42, 0fBF800000;
	fma.rn.f32 	%f116, %f116, %f42, %f34;

BB0_15:
	mul.f32 	%f52, %f116, 0f472AEE8C;
	abs.f32 	%f53, %f52;
	cvt.rmi.f32.f32	%f54, %f53;
	sub.f32 	%f55, %f53, %f54;
	add.f32 	%f56, %f1, %f55;
	add.f32 	%f57, %f2, %f55;
	ld.const.v2.u32 	{%r76, %r77}, [paras+24];
	mov.u32 	%r72, 1;
	cvt.rn.f32.u32	%f58, %r76;
	cvt.rn.f32.u32	%f59, %r77;
	mul.f32 	%f60, %f58, 0f3F000000;
	mul.f32 	%f61, %f59, 0f3F000000;
	sub.f32 	%f62, %f56, %f60;
	sub.f32 	%f63, %f57, %f61;
	ld.const.u64 	%rd17, [paras+16];
	cvta.to.global.u64 	%rd18, %rd17;
	ld.global.v4.f32 	{%f64, %f65, %f66, %f67}, [%rd18+48];
	ld.global.v4.f32 	{%f69, %f70, %f71, %f72}, [%rd18];
	mul.f32 	%f77, %f63, %f70;
	fma.rn.f32 	%f78, %f62, %f69, %f77;
	fma.rn.f32 	%f79, %f67, %f71, %f78;
	fma.rn.f32 	%f80, %f72, 0f00000000, %f79;
	ld.global.v4.f32 	{%f81, %f82, %f83, %f84}, [%rd18+16];
	mul.f32 	%f89, %f63, %f82;
	fma.rn.f32 	%f90, %f62, %f81, %f89;
	fma.rn.f32 	%f91, %f67, %f83, %f90;
	fma.rn.f32 	%f92, %f84, 0f00000000, %f91;
	ld.global.v4.f32 	{%f93, %f94, %f95, %f96}, [%rd18+32];
	mul.f32 	%f101, %f63, %f94;
	fma.rn.f32 	%f102, %f62, %f93, %f101;
	fma.rn.f32 	%f103, %f67, %f95, %f102;
	fma.rn.f32 	%f104, %f96, 0f00000000, %f103;
	mul.f32 	%f105, %f92, %f92;
	fma.rn.f32 	%f106, %f80, %f80, %f105;
	fma.rn.f32 	%f107, %f104, %f104, %f106;
	sqrt.rn.f32 	%f108, %f107;
	rcp.rn.f32 	%f109, %f108;
	mul.f32 	%f46, %f80, %f109;
	mul.f32 	%f47, %f92, %f109;
	mul.f32 	%f48, %f104, %f109;
	shr.u64 	%rd20, %rd8, 32;
	cvt.u32.u64	%r74, %rd20;
	cvt.u32.u64	%r75, %rd8;
	ld.const.u64 	%rd16, [paras+8];
	mov.f32 	%f49, 0f3A83126F;
	mov.f32 	%f50, 0f5A0E1BCA;
	// inline asm
	call (%r67, %r68), _optix_trace_2, (%rd16, %f64, %f65, %f66, %f46, %f47, %f48, %f49, %f50, %f34, %r72, %r34, %r34, %r72, %r34, %r74, %r75);
	// inline asm
	ld.const.u64 	%rd21, [paras];
	cvta.to.global.u64 	%rd22, %rd21;
	mad.lo.s32 	%r80, %r76, %r32, %r31;
	mul.wide.u32 	%rd23, %r80, 16;
	add.s64 	%rd24, %rd22, %rd23;
	ld.local.f32 	%f110, [%rd1+8];
	ld.local.f32 	%f111, [%rd1+4];
	ld.local.f32 	%f112, [%rd1];
	mov.f32 	%f113, 0f3F800000;
	st.global.v4.f32 	[%rd24], {%f112, %f111, %f110, %f113};
	ret;
}

	// .globl	__closesthit__Ahh
.visible .entry __closesthit__Ahh(

)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<27>;
	.reg .b32 	%r<11>;
	.reg .f64 	%fd<74>;
	.reg .b64 	%rd<8>;


	// inline asm
	call (%rd2), _optix_get_sbt_data_ptr_64, ();
	// inline asm
	// inline asm
	call (%r3), _optix_read_primitive_idx, ();
	// inline asm
	ld.u64 	%rd3, [%rd2];
	mul.wide.s32 	%rd4, %r3, 12;
	add.s64 	%rd5, %rd3, %rd4;
	ld.f32 	%f5, [%rd5];
	ld.f32 	%f6, [%rd5+4];
	ld.f32 	%f7, [%rd5+8];
	// inline asm
	call (%r4), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r5), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd6, %r4;
	cvt.u64.u32	%rd7, %r5;
	bfi.b64 	%rd1, %rd6, %rd7, 32, 32;
	add.f32 	%f8, %f5, 0f3F800000;
	add.f32 	%f9, %f6, 0f3F800000;
	add.f32 	%f10, %f7, 0f3F800000;
	mul.f32 	%f11, %f9, %f9;
	fma.rn.f32 	%f12, %f8, %f8, %f11;
	fma.rn.f32 	%f13, %f10, %f10, %f12;
	sqrt.rn.f32 	%f14, %f13;
	rcp.rn.f32 	%f15, %f14;
	mul.f32 	%f1, %f8, %f15;
	mul.f32 	%f2, %f9, %f15;
	mul.f32 	%f3, %f10, %f15;
	// inline asm
	call (%f4), _optix_get_ray_tmax, ();
	// inline asm
	cvt.f64.f32	%fd6, %f4;
	mov.f64 	%fd7, 0d4034000000000000;
	div.rn.f64 	%fd1, %fd7, %fd6;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r1}, %fd1;
	}
	and.b32  	%r2, %r1, 2147483647;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r6, %temp}, %fd1;
	}
	mov.b64 	%fd2, {%r6, %r2};
	setp.ltu.f64	%p1, %fd2, 0d3FE4F92224DD2F1A;
	@%p1 bra 	BB1_2;
	bra.uni 	BB1_1;

BB1_2:
	mul.f64 	%fd49, %fd1, %fd1;
	mov.f64 	%fd50, 0d3F14359F420AFC3D;
	mov.f64 	%fd51, 0dBEF0BC46E2F5E964;
	fma.rn.f64 	%fd52, %fd51, %fd49, %fd50;
	mov.f64 	%fd53, 0dBF2DF9F0728C5D84;
	fma.rn.f64 	%fd54, %fd52, %fd49, %fd53;
	mov.f64 	%fd55, 0d3F4337D1CEC4F033;
	fma.rn.f64 	%fd56, %fd54, %fd49, %fd55;
	mov.f64 	%fd57, 0dBF57D6E9674335B3;
	fma.rn.f64 	%fd58, %fd56, %fd49, %fd57;
	mov.f64 	%fd59, 0d3F6D6D000D7AAD3D;
	fma.rn.f64 	%fd60, %fd58, %fd49, %fd59;
	mov.f64 	%fd61, 0dBF8226E1F3CF1EF5;
	fma.rn.f64 	%fd62, %fd60, %fd49, %fd61;
	mov.f64 	%fd63, 0d3F9664F47EC0C8CF;
	fma.rn.f64 	%fd64, %fd62, %fd49, %fd63;
	mov.f64 	%fd65, 0dBFABA1BA1B80AB40;
	fma.rn.f64 	%fd66, %fd64, %fd49, %fd65;
	mov.f64 	%fd67, 0d3FC111111110FA4A;
	fma.rn.f64 	%fd68, %fd66, %fd49, %fd67;
	mov.f64 	%fd69, 0dBFD5555555555550;
	fma.rn.f64 	%fd70, %fd68, %fd49, %fd69;
	mov.f64 	%fd71, 0d0000000000000000;
	fma.rn.f64 	%fd72, %fd70, %fd49, %fd71;
	fma.rn.f64 	%fd73, %fd72, %fd1, %fd1;
	bra.uni 	BB1_3;

BB1_1:
	add.f64 	%fd8, %fd2, %fd2;
	cvt.rn.f32.f64	%f16, %fd8;
	mul.f32 	%f17, %f16, 0f3FB8AA3B;
	cvt.rni.f32.f32	%f18, %f17;
	cvt.f64.f32	%fd9, %f18;
	neg.f64 	%fd10, %fd9;
	mov.f64 	%fd11, 0d3FE62E42FEFA39EF;
	fma.rn.f64 	%fd12, %fd10, %fd11, %fd8;
	mov.f64 	%fd13, 0d3E928A27F89B6999;
	mov.f64 	%fd14, 0d3E5AE904A4741B81;
	fma.rn.f64 	%fd15, %fd14, %fd12, %fd13;
	mov.f64 	%fd16, 0d3EC71DE715FF7E07;
	fma.rn.f64 	%fd17, %fd15, %fd12, %fd16;
	mov.f64 	%fd18, 0d3EFA019A6B0AC45A;
	fma.rn.f64 	%fd19, %fd17, %fd12, %fd18;
	mov.f64 	%fd20, 0d3F2A01A017EED94F;
	fma.rn.f64 	%fd21, %fd19, %fd12, %fd20;
	mov.f64 	%fd22, 0d3F56C16C17F2A71B;
	fma.rn.f64 	%fd23, %fd21, %fd12, %fd22;
	mov.f64 	%fd24, 0d3F811111111173C4;
	fma.rn.f64 	%fd25, %fd23, %fd12, %fd24;
	mov.f64 	%fd26, 0d3FA555555555211A;
	fma.rn.f64 	%fd27, %fd25, %fd12, %fd26;
	mov.f64 	%fd28, 0d3FC5555555555540;
	fma.rn.f64 	%fd29, %fd27, %fd12, %fd28;
	mov.f64 	%fd30, 0d3FE0000000000005;
	fma.rn.f64 	%fd31, %fd29, %fd12, %fd30;
	mul.f64 	%fd32, %fd12, %fd31;
	fma.rn.f64 	%fd33, %fd32, %fd12, %fd12;
	ex2.approx.ftz.f32 	%f19, %f18;
	cvt.f64.f32	%fd34, %f19;
	mov.f64 	%fd35, 0d3FF0000000000000;
	sub.f64 	%fd36, %fd35, %fd34;
	neg.f64 	%fd37, %fd33;
	fma.rn.f64 	%fd38, %fd37, %fd34, %fd36;
	mov.f64 	%fd39, 0d4000000000000000;
	sub.f64 	%fd40, %fd39, %fd38;
	rcp.approx.ftz.f64 	%fd41, %fd40;
	neg.f64 	%fd42, %fd40;
	fma.rn.f64 	%fd43, %fd42, %fd41, %fd35;
	fma.rn.f64 	%fd44, %fd43, %fd43, %fd43;
	fma.rn.f64 	%fd45, %fd44, %fd41, %fd41;
	neg.f64 	%fd46, %fd45;
	fma.rn.f64 	%fd47, %fd39, %fd46, %fd35;
	setp.gt.u32	%p2, %r2, 1077088193;
	selp.f64	%fd48, 0d3FF0000000000000, %fd47, %p2;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r7, %temp}, %fd48;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r8}, %fd48;
	}
	and.b32  	%r9, %r1, -2147483648;
	or.b32  	%r10, %r8, %r9;
	mov.b64 	%fd73, {%r7, %r10};

BB1_3:
	cvt.rn.f32.f64	%f20, %fd73;
	mul.f32 	%f21, %f1, 0f3F000000;
	mul.f32 	%f22, %f21, %f20;
	mul.f32 	%f23, %f2, 0f3F000000;
	mul.f32 	%f24, %f23, %f20;
	mul.f32 	%f25, %f3, 0f3F000000;
	mul.f32 	%f26, %f25, %f20;
	st.f32 	[%rd1], %f22;
	st.f32 	[%rd1+4], %f24;
	st.f32 	[%rd1+8], %f26;
	ret;
}

	// .globl	__miss__Ahh
.visible .entry __miss__Ahh(

)
{



	ret;
}


